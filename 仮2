import os
import sys
import time  # クラスごとの処理時間を計測
import cv2
import numpy as np
import insightface
from tqdm import tqdm  # 進捗バーライブラリ
from sklearn.model_selection import train_test_split
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout, Input, Concatenate, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
import tensorflow as tf  # TensorFlowインポート

# ---------------------------------------------
# パス設定と初期化
# ---------------------------------------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATASET_DIR = os.path.join(BASE_DIR, "processed_data")  # 学習データフォルダ
EMBEDDING_DIR = os.path.join(BASE_DIR, "embeddings")  # 埋め込みベクトル保存フォルダ
MODEL_DIR = os.path.join(BASE_DIR, "model")  # 学習済みモデル保存フォルダ
NO_FACE_DIR = os.path.join(BASE_DIR, "unnecessary_file/no_face_detected")  # 顔が検出できなかった画像の保存先

if not os.path.exists(EMBEDDING_DIR):
    os.makedirs(EMBEDDING_DIR)
if not os.path.exists(MODEL_DIR):
    os.makedirs(MODEL_DIR)
if not os.path.exists(NO_FACE_DIR):
    os.makedirs(NO_FACE_DIR)

# ---------------------------------------------
# ArcFaceモデルとEfficientNetB0の準備
# ---------------------------------------------
print("Loading ArcFace model...")
try:
    app = insightface.app.FaceAnalysis(name='buffalo_l')  # ArcFaceモデル
    app.prepare(ctx_id=0, det_size=(224, 224))  # GPUを使用（ctx_id=0）
except Exception as e:
    print("GPU not available, switching to CPU...")
    app = insightface.app.FaceAnalysis(name='buffalo_l')
    app.prepare(ctx_id=-1, det_size=(224, 224))  # CPUを使用（ctx_id=-1）

print("Loading EfficientNetB0 model for fine-tuning...")
base_efficientnet = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
for layer in base_efficientnet.layers[:-20]:  # 最後の20層のみ学習可能にする
    layer.trainable = False

# EfficientNetB0 出力用の中間層
x = base_efficientnet.output
x = GlobalAveragePooling2D()(x)
efficientnet_output = Dense(512, activation='relu', name="efficientnet_embedding")(x)
fine_tuned_efficientnet = Model(inputs=base_efficientnet.input, outputs=efficientnet_output)

# ---------------------------------------------
# 顔埋め込みベクトルの抽出
# ---------------------------------------------
def extract_face_embeddings(image_path):
    """
    ArcFaceとEfficientNetB0を使用して画像から埋め込みベクトルを取得する。
    :param image_path: 画像のパス
    :return: (ArcFace埋め込みベクトル, EfficientNetB0埋め込みベクトル)
    """
    img = cv2.imread(image_path)
    if img is None:
        return None, None, img

    # ArcFace埋め込み
    faces = app.get(img)
    arcface_embedding = faces[0].embedding if len(faces) > 0 else None

    # ArcFace埋め込みの強化
    if arcface_embedding is not None:
        arcface_embedding = np.expand_dims(arcface_embedding, axis=0)  # 1次元→2次元変換
        arcface_embedding = Dense(128, activation='relu')(arcface_embedding)
        arcface_embedding = tf.squeeze(arcface_embedding)  # 2次元→1次元に戻す

    # EfficientNetB0埋め込み
    img_resized = cv2.resize(img, (224, 224))
    img_array = np.expand_dims(img_resized / 255.0, axis=0)
    efficientnet_embedding = fine_tuned_efficientnet.predict(img_array, verbose=0)

    return arcface_embedding, efficientnet_embedding, img

# ---------------------------------------------
# データセットの処理（埋め込みベクトルの生成）
# ---------------------------------------------
def generate_embeddings(dataset_dir, embedding_save_path):
    """
    データセットの各画像からArcFaceとEfficientNetB0の埋め込みベクトルを生成し保存する。
    """
    arcface_embeddings = []
    efficientnet_embeddings = []
    labels = []
    class_indices = {}

    total_files = sum(len(files) for _, _, files in os.walk(dataset_dir))  # 総ファイル数

    for class_idx, class_name in enumerate(sorted(os.listdir(dataset_dir))):
        class_path = os.path.join(dataset_dir, class_name)
        if not os.path.isdir(class_path):
            continue
        class_indices[class_idx] = class_name
        print(f"\nProcessing class '{class_name}'...")

        class_files = [img_name for img_name in os.listdir(class_path) if img_name.lower().endswith(('jpg', 'jpeg', 'png'))]
        no_face_count = 0

        start_time = time.time()
        for img_name in tqdm(class_files, desc=f"Class '{class_name}'", leave=True, unit="img"):
            img_path = os.path.join(class_path, img_name)
            arcface_embedding, efficientnet_embedding, img = extract_face_embeddings(img_path)
            if arcface_embedding is not None and efficientnet_embedding is not None:
                arcface_embeddings.append(arcface_embedding)
                efficientnet_embeddings.append(efficientnet_embedding.flatten())
                labels.append(class_idx)
            else:
                no_face_count += 1
                save_path = os.path.join(NO_FACE_DIR, f"{class_name}_{img_name}")
                if img is not None:
                    cv2.imwrite(save_path, img)

        end_time = time.time()
        print(f"Class '{class_name}' completed in {end_time - start_time:.2f} seconds | No face detected: {no_face_count}")

    np.savez(embedding_save_path,
             arcface_embeddings=np.array(arcface_embeddings),
             efficientnet_embeddings=np.array(efficientnet_embeddings),
             labels=np.array(labels))
    print(f"Embeddings and labels saved to {embedding_save_path}")
    return class_indices

# ---------------------------------------------
# 分類モデルの構築
# ---------------------------------------------
def build_combined_model(input_dim1, input_dim2, num_classes):
    """
    ArcFaceとEfficientNetB0の埋め込みベクトルを入力とする分類モデルを構築。
    """
    input1 = Input(shape=(input_dim1,))
    input2 = Input(shape=(input_dim2,))
    combined = Concatenate()([input1, input2])

    x = Dense(512, activation='relu')(combined)
    x = Dropout(0.5)(x)
    x = Dense(256, activation='relu')(x)
    x = Dropout(0.5)(x)
    output = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=[input1, input2], outputs=output)
    model.compile(optimizer=Adam(learning_rate=0.0001),
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# ---------------------------------------------
# メイン処理
# ---------------------------------------------
if __name__ == "__main__":
    embedding_file = os.path.join(EMBEDDING_DIR, "combined_embeddings.npz")
    class_indices = generate_embeddings(DATASET_DIR, embedding_file)

    data = np.load(embedding_file)
    X1 = data['arcface_embeddings']
    X2 = data['efficientnet_embeddings']
    y = data['labels']

    print("Building and training combined model...")
    num_classes = len(np.unique(y))  # 動的にクラス数を取得
    model = build_combined_model(input_dim1=X1.shape[1], input_dim2=X2.shape[1], num_classes=num_classes)
    model.fit([X1, X2], to_categorical(y, num_classes=num_classes), validation_split=0.2, epochs=60, batch_size=32)

    model_path = os.path.join(MODEL_DIR, "combined_model.h5")
    model.save(model_path)
    print(f"Model saved to {model_path}")

# Ver 1.05  
# 修正ルール: 修正時にバージョンを0.01ずつ増加させ、完全なコードを出力する。
