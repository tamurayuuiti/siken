import os
import cv2
import pandas as pd

def organize_and_resize_dataset(image_dir, identity_file, bbox_file, output_dir, target_size=(112, 112)):
    """
    データセットをクラスごとに整理し、画像をリサイズして保存する。
    :param image_dir: 元の画像フォルダ（CelebAの全画像が含まれているフォルダ）
    :param identity_file: ID情報が記載されたファイル（例: identity_CelebA.txt）
    :param bbox_file: 顔領域（バウンディングボックス）情報ファイル（例: list_bbox_celeba_png.txt）
    :param output_dir: クラスごとに整理してリサイズした画像の保存先
    :param target_size: リサイズ後の画像サイズ (width, height)
    """
    # 出力ディレクトリを作成
    os.makedirs(output_dir, exist_ok=True)

    # ID情報ファイルを読み込み
    with open(identity_file, 'r') as f:
        lines = f.readlines()

    # バウンディングボックス情報を読み込み
    bbox_data = pd.read_csv(bbox_file, delim_whitespace=True, skiprows=1)

    # 各画像をクラスごとに整理
    for line in lines:
        # ファイル名とクラスIDを取得
        image_name, person_id = line.strip().split()  # 例: "000001.png 1"

        # 出力先のクラスフォルダを作成
        person_folder = os.path.join(output_dir, f'class_{person_id}')
        os.makedirs(person_folder, exist_ok=True)

        # 元画像のパス
        input_image_path = os.path.join(image_dir, image_name)
        if not os.path.exists(input_image_path):
            print(f"Warning: Image not found: {input_image_path}")
            continue

        # バウンディングボックス情報を取得
        bbox_row = bbox_data[bbox_data['image_id'] == image_name]  # 画像名は`.png`で一致
        if bbox_row.empty:
            print(f"Warning: No bounding box found for {image_name}")
            continue
        x, y, w, h = bbox_row.iloc[0][['x_1', 'y_1', 'width', 'height']]

        # 画像の読み込みと顔領域のクロップ＆リサイズ
        try:
            img = cv2.imread(input_image_path)
            if img is None:
                raise ValueError(f"Failed to read image: {input_image_path}")
            cropped_img = img[int(y):int(y + h), int(x):int(x + w)]  # 顔領域のクロップ
            resized_img = cv2.resize(cropped_img, target_size)

            # リサイズ画像の保存
            output_image_path = os.path.join(person_folder, image_name)
            cv2.imwrite(output_image_path, resized_img)
        except Exception as e:
            print(f"Error processing image {image_name}: {e}")

    print(f"Organized and resized dataset saved to: {output_dir}")


# --- 実行 ---
if __name__ == "__main__":
    # 現在のスクリプトがあるディレクトリを基準とする
    base_dir = os.path.dirname(os.path.abspath(__file__))

    # パス指定（相対パス）
    image_dir = os.path.join(base_dir, "data/img_align_celeba")  # 元画像フォルダ
    identity_file = os.path.join(base_dir, "data/identity_CelebA.txt")  # ID情報ファイル
    bbox_file = os.path.join(base_dir, "data/list_bbox_celeba_png.txt")  # PNG対応のバウンディングボックス情報ファイル
    output_dir = os.path.join(base_dir, "processed_data")  # 出力フォルダ

    # 処理を実行
    organize_and_resize_dataset(image_dir, identity_file, bbox_file, output_dir, target_size=(112, 112))
