import os
import cv2
import numpy as np
import insightface
from tensorflow.keras.models import load_model
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.models import Model
import tensorflow as tf
import time  # 認識速度の計測
from collections import Counter  # 統計情報

# ---------------------------------------------
# パス設定と初期化（現在のディレクトリを基準とした相対パス）
# ---------------------------------------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # 現在のスクリプトのディレクトリ
TEST_IMAGES_DIR = os.path.join(BASE_DIR, "test_images")  # テスト画像フォルダ
DATASET_DIR = os.path.join(BASE_DIR, "processed_data")  # 学習データフォルダ
MODEL_DIR = os.path.join(BASE_DIR, "main_model")  # 保存されたモデルフォルダ
OUTPUT_IMAGES_DIR = os.path.join(BASE_DIR, "output_images")  # 結果出力フォルダ
MODEL_PATH = os.path.join(MODEL_DIR, "combined_model.h5")  # 使用するモデルファイル

# 出力ディレクトリの作成
if not os.path.exists(OUTPUT_IMAGES_DIR):
    os.makedirs(OUTPUT_IMAGES_DIR)

# ArcFaceとEfficientNetB0の読み込み
print("Loading ArcFace model...")
app = insightface.app.FaceAnalysis(name='buffalo_l')
app.prepare(ctx_id=-1, det_size=(224, 224))  # CPUを使用

print("Loading EfficientNetB0 model for feature extraction...")
base_efficientnet = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
x = base_efficientnet.output
efficientnet_output = tf.keras.layers.GlobalAveragePooling2D()(x)
efficientnet_model = Model(inputs=base_efficientnet.input, outputs=efficientnet_output)

# モデルの読み込み
print("Loading trained model...")
model = load_model(MODEL_PATH)

# 学習時のクラス名をフォルダから取得
class_names = sorted([d for d in os.listdir(DATASET_DIR) if os.path.isdir(os.path.join(DATASET_DIR, d))])

# 統計情報
result_counter = Counter()

# ---------------------------------------------
# 画像の前処理関数
# ---------------------------------------------
def extract_embeddings(image, target_size=(224, 224)):
    """
    テスト画像からArcFaceとEfficientNetB0の埋め込みベクトルを取得する
    """
    try:
        # ArcFace埋め込みベクトル
        faces = app.get(image)
        embeddings = []
        face_locations = []

        for face in faces:
            arcface_embedding = face.embedding
            face_locations.append(face.bbox.astype(int))

            # EfficientNetB0埋め込みベクトル
            face_img = image[face_locations[-1][1]:face_locations[-1][3], face_locations[-1][0]:face_locations[-1][2]]
            face_img_resized = cv2.resize(face_img, target_size)
            face_img_array = np.expand_dims(face_img_resized / 255.0, axis=0)
            efficientnet_embedding = efficientnet_model.predict(face_img_array, verbose=0).flatten()

            embeddings.append((arcface_embedding, efficientnet_embedding, face_locations[-1]))
        return embeddings
    except Exception as e:
        print(f"Error processing image: {e}")
        return []

# ---------------------------------------------
# 複数画像の推論処理
# ---------------------------------------------
print("Starting inference on test images...")
for img_name in os.listdir(TEST_IMAGES_DIR):
    test_image_path = os.path.join(TEST_IMAGES_DIR, img_name)
    image = cv2.imread(test_image_path)

    if image is None:
        print(f"Error: Unable to load image {test_image_path}")
        continue

    start_time = time.time()  # 認識開始時間
    embeddings = extract_embeddings(image)

    for arcface_embedding, efficientnet_embedding, bbox in embeddings:
        embeddings_input = [np.expand_dims(arcface_embedding, axis=0), np.expand_dims(efficientnet_embedding, axis=0)]
        predictions = model.predict(embeddings_input, verbose=0)

        # 結果の処理
        predicted_class_index = np.argmax(predictions)
        confidence = predictions[0][predicted_class_index] * 100  # 確率を%に変換

        # "unknown" 判定
        UNKNOWN_THRESHOLD = 80.0
        if confidence < UNKNOWN_THRESHOLD:
            predicted_class = "unknown"
        else:
            predicted_class = class_names[predicted_class_index]

        # 統計情報更新
        result_counter[predicted_class] += 1

        # 結果を画像に描画
        x1, y1, x2, y2 = bbox
        label = f"{predicted_class} ({confidence:.2f}%)"
        color = (0, 255, 0) if predicted_class != "unknown" else (0, 0, 255)
        cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
        cv2.putText(image, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

    # 処理時間計測
    end_time = time.time()
    processing_time = end_time - start_time

    # 保存先のパス
    output_path = os.path.join(OUTPUT_IMAGES_DIR, img_name)
    cv2.imwrite(output_path, image)

    print(f"Processed {img_name} in {processing_time:.2f} seconds. Results saved to {output_path}")

# ---------------------------------------------
# 統計情報の表示
# ---------------------------------------------
print("\nRecognition Summary:")
for class_name, count in result_counter.items():
    print(f"{class_name}: {count} images")
print(f"Total images processed: {sum(result_counter.values())}")
